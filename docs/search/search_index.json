{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SenseHat connected clock \u00b6 This is the official documentation of the SenseHat connecter clock. Be pleased to find all the source code on Github . Why this project \u00b6 One day, I see a video about a clock which we can be programmed and display information on a LED Matrix. I loved to get that clock, but when I see the price (which was very expensive) I I choose to program mine on the sense-hat device of the RaspberryPi.","title":"Home"},{"location":"#welcome_to_sensehat_connected_clock","text":"This is the official documentation of the SenseHat connecter clock. Be pleased to find all the source code on Github .","title":"Welcome to SenseHat connected clock"},{"location":"#why_this_project","text":"One day, I see a video about a clock which we can be programmed and display information on a LED Matrix. I loved to get that clock, but when I see the price (which was very expensive) I I choose to program mine on the sense-hat device of the RaspberryPi.","title":"Why this project"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"feature/","text":"General features \u00b6 The goal of this project is to give a little clock. For that, there multiple files I write. Programs \u00b6 Here is the list of programs that are in this project. Clock The main program of this project File: clock.py Binary clocks Clocks in binary mode Files: binary_clock_block.py and binary_clock.py Digital clock A digital clock File: digital_clock.py Menu config A menu to configure options File: menu_config.py Diaporama Display a diaporama of images File: diaporama.py Clock \u00b6 The main program of the project. That program is a switcher for other programs. With it, you have access to: Binary clocks Digital clock Menu config Temperature of the clock The date (with format: dd/mm/yyyy and day_number month_short_name. ) The time (with format: hh:mm ) Binary clocks \u00b6 Display a binary clock . Two modes are available. Block mode \u00b6 Dots are displayed on the matrix using 2 by 2 LED. This mode uses all the space of the LED matrix. Hyphen mode \u00b6 Dots are displayed on the matrix using 1 LED for the height and 2 for the width. This mode only uses a part of the LED matrix. Digital clock \u00b6 Display a digital clock. The matrix LED is divided into four parts: Top Left (hours tens) Top Right (hours units) Bottom Left (minutes tens) Bottom Right (minutes units) Hours are on the top and minutes on the bottom of the LED matrix Menu config \u00b6 Configuration menu. You can configure: The brightness The foreground color The background color The rotation angle The text scroll speed The output is a json formatted string. Diaporama \u00b6 Display a diaporama of pictures. Pictures must have a size of 8 by 8 pixels and be placed in the folder ./clock/pictures/ of the project.","title":"Feature"},{"location":"feature/#general_features","text":"The goal of this project is to give a little clock. For that, there multiple files I write.","title":"General features"},{"location":"feature/#programs","text":"Here is the list of programs that are in this project. Clock The main program of this project File: clock.py Binary clocks Clocks in binary mode Files: binary_clock_block.py and binary_clock.py Digital clock A digital clock File: digital_clock.py Menu config A menu to configure options File: menu_config.py Diaporama Display a diaporama of images File: diaporama.py","title":"Programs"},{"location":"feature/#clock","text":"The main program of the project. That program is a switcher for other programs. With it, you have access to: Binary clocks Digital clock Menu config Temperature of the clock The date (with format: dd/mm/yyyy and day_number month_short_name. ) The time (with format: hh:mm )","title":"Clock"},{"location":"feature/#binary_clocks","text":"Display a binary clock . Two modes are available.","title":"Binary clocks"},{"location":"feature/#block_mode","text":"Dots are displayed on the matrix using 2 by 2 LED. This mode uses all the space of the LED matrix.","title":"Block mode"},{"location":"feature/#hyphen_mode","text":"Dots are displayed on the matrix using 1 LED for the height and 2 for the width. This mode only uses a part of the LED matrix.","title":"Hyphen mode"},{"location":"feature/#digital_clock","text":"Display a digital clock. The matrix LED is divided into four parts: Top Left (hours tens) Top Right (hours units) Bottom Left (minutes tens) Bottom Right (minutes units) Hours are on the top and minutes on the bottom of the LED matrix","title":"Digital clock"},{"location":"feature/#menu_config","text":"Configuration menu. You can configure: The brightness The foreground color The background color The rotation angle The text scroll speed The output is a json formatted string.","title":"Menu config"},{"location":"feature/#diaporama","text":"Display a diaporama of pictures. Pictures must have a size of 8 by 8 pixels and be placed in the folder ./clock/pictures/ of the project.","title":"Diaporama"},{"location":"install/","text":"Install \u00b6 Requirements \u00b6 This project is made on a Raspberry Pi Model 3 with the Sense HAT . This project must work on all Raspberry Pi which can have a Sense HAT. Download \u00b6 The first thing to do is to download the project source code. To do that clone the remote or download a ZIP file of the GitHub repository . Project architecture \u00b6 The project architecture is simple. . |- clock/ |- docs/ |- documentation/ |- LICENSE |- README The clock folder \u00b6 The clock folder is where all the source code of the application is. The docs folder \u00b6 The docs folder is the source code of the documentation generate by MkDocs . The documentation folder \u00b6 The documentation folder is the source code for the generation of the documentation by MkDocs . The LICENSE file \u00b6 The LICENSE file is the license of the project. You can read it here . The README file \u00b6 The README file is the readme of the project. Setup \u00b6 The app is in the clock folder. You have to go in that folder. First, you have to install the dependencies. To do that, run: pip install -r requirements.txt Launch \u00b6 To launch an app, you can execute each python file. Each one does different feature, to know how to use them, go to the Usage page","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#requirements","text":"This project is made on a Raspberry Pi Model 3 with the Sense HAT . This project must work on all Raspberry Pi which can have a Sense HAT.","title":"Requirements"},{"location":"install/#download","text":"The first thing to do is to download the project source code. To do that clone the remote or download a ZIP file of the GitHub repository .","title":"Download"},{"location":"install/#project_architecture","text":"The project architecture is simple. . |- clock/ |- docs/ |- documentation/ |- LICENSE |- README","title":"Project architecture"},{"location":"install/#the_clock_folder","text":"The clock folder is where all the source code of the application is.","title":"The clock folder"},{"location":"install/#the_docs_folder","text":"The docs folder is the source code of the documentation generate by MkDocs .","title":"The docs folder"},{"location":"install/#the_documentation_folder","text":"The documentation folder is the source code for the generation of the documentation by MkDocs .","title":"The documentation folder"},{"location":"install/#the_license_file","text":"The LICENSE file is the license of the project. You can read it here .","title":"The LICENSE file"},{"location":"install/#the_readme_file","text":"The README file is the readme of the project.","title":"The README file"},{"location":"install/#setup","text":"The app is in the clock folder. You have to go in that folder. First, you have to install the dependencies. To do that, run: pip install -r requirements.txt","title":"Setup"},{"location":"install/#launch","text":"To launch an app, you can execute each python file. Each one does different feature, to know how to use them, go to the Usage page","title":"Launch"},{"location":"issues/","text":"","title":"Issues"},{"location":"license/","text":"MIT License Copyright (c) 2018 Alban Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage/","text":"Introduction \u00b6 Here is the explanation of all programs. What arguments you can give when you execute them How to use them To execute a file, you must be in the folder clock/ of the project and do ./<file> in a terminal. Replace <file> by the python file you want to execute in the clock/ folder. Programs \u00b6 Clock File: clock.py Binary clocks Files: binary_clock_block.py and binary_clock.py Digital clock File: digital_clock.py Menu config File: menu_config.py Diaporama File: diaporama.py Clock \u00b6 The clock is the main program of the project. Colors \u00b6 First, I'll explain you the colors.json file (located in the clock/ folder). This file is a json object. Keys are colors names and values are the RGB color value as a list. The list contains three integers (between 0 and 255). { \"color_name\": [<red_value>, <green_value>, <blue_value>] } To see an example of what the colors.json should contain, you can look the content of that file on GitHub. This file is made for people who want to add their custom colors. Arguments \u00b6 Here I'll explain all argument you can give to the clock program. To get help on the clock program and see what arguments it take, call it with the -h or --help argument as follow ./clock.py -h . -h or --help \u2192 Show the help. -fg or --foreground with one of the color name which is in the colors.json file \u2192 Set the foreground color. -bg or --background with one of the color name which is in the colors.json file \u2192 Set the background color. -r or --rotation with the rotation angle (0, 90, 180, 270) \u2192 Set the rotation of the LED matrix. -b or --brightness with a float number between 0 and 1 \u2192 Set the brightness, higher is brighter. -l or --location with a string which is the name of the location you want the weather \u2192 Set the location you want the weather. -i or --interactive \u2192 Launch the program in interactive mode. -s or --speed with any int of float number higher than 0 \u2192 Set the scoll speed and refresh rate, lower fastest. Config \u00b6 I'll now explain how configuration this program work and his default values. The clock program has 4 configuration type: The defaults configuration. This is the configuration used in last resort The config file . This configuration file is persistent. The arguments given. This is configuration given when you start the program. The interactive mode . This mode asks you each value which can be confugured at the program start. The priroty of configuration is like this: Very Prior Prior Less Prior Not Prior Interactive mode Arguments Config file Defaults defaults \u00b6 Defaults values are used when: The config.json file is not found. No arguments are given. The interactive mode is not used. Defaults values are: Parameter Default value foreground white background black rotation 0 brightness 1 location None speed 0.1 config file \u00b6 Values in the configuration file are used when: The file config.json is present. The value for a setting is valid. No arguments are given. The interactive mode is not used. You can change the configuration in this file: By hand (not recommended). By using the Menu config program and copying the output in the config.json file. By accessing the Menu config feature while the clock is running (recommended). To know how to do that, see the usage section. Warning: Using the Menu config feature of clock program will overwrite the previous config in the config.json file . arguments \u00b6 Values in arguments are used when: The argument is present. The value of the argument is valid. The interactive mode is not used. To know available arguments and their values, refer to the Arguments section. Giving arguments will not overwrite the config.json file. interactive \u00b6 Values given in interactive mode are used when: The interactive mode is used. Using the interactive mode will not overwrite the config.json file. Usage \u00b6 When the clock is started (it may take a little time to display things on the LED matrix) use the joystick to navigate. Joystick action Action Pushing Right Switch to the next feature Pushing Left Switch to the previous feature Pushing Up Nothing Pushing Down Nothing Pressing it Start the menu config (press agait to exit) Each config work exactly the same as when they are started as the main program. To know how to use features, see below. Binary clocks \u00b6 The two binary clocks both don't take any arguments. They just display the time in binary. The time is continuously displayed. Time is displaied as explained in the feature section . Block mode \u00b6 The rotation is set to 0\u00b0 (that mean the up is up and the down is down). Hyphen mode \u00b6 The rotation is set to 180\u00b0 (that mean the up is down and the down is up). Digital clock \u00b6 The digital clock program take no arguments. It just displays the time. The time is continuously displayed. The rotation is set to 0\u00b0 (that mean the up is up and the down is down). Time is displayed as explained in the feature section . Menu config \u00b6 The menu config program is used to make the config. The rotation is set to 180\u00b0 (that mean the up is down and the down is up). The foreground color is set to blue while the background color is set to yellow. When you execute the program you'll first can change the brightness. Pushing the joystick on the left you'll can change the text scroll speed (lower is speediest, highest is slowest). Pushing the joystick on the left again, you'll can change the rotation. Pushing the joystick on the left again, you'll can change the background color. Pushing the joystick on the left again, you'll can change the foreground color. Pushing the joystick one last time on the left you go back to the brightness settings. Pushing the joystick to the right will browse settings in the reverse order. To change value of a setting, push the joystick up or down. For example, pushing down the joystick on the brightness settings will reduce it, while pushing it up will increase the brightness. Changes take effect immediately. When you set the rotate, only the display rotates. The joystick directions don't change. When you have configured your settings as you like, press the joystick to quit the program. It will print on screen you json configuration. You can copy it to the config file of the clock program. Diaporama \u00b6 The diaporama program takes no arguments. It just pass images. Images are displayed 1.5 seconds. The rotation is set to 180\u00b0 (that mean the up is down and the down is up). You can add your custom images in the folder clock/pictures/ . Images you add should have a size of 8 by 8 pixels .","title":"Usage"},{"location":"usage/#introduction","text":"Here is the explanation of all programs. What arguments you can give when you execute them How to use them To execute a file, you must be in the folder clock/ of the project and do ./<file> in a terminal. Replace <file> by the python file you want to execute in the clock/ folder.","title":"Introduction"},{"location":"usage/#programs","text":"Clock File: clock.py Binary clocks Files: binary_clock_block.py and binary_clock.py Digital clock File: digital_clock.py Menu config File: menu_config.py Diaporama File: diaporama.py","title":"Programs"},{"location":"usage/#clock","text":"The clock is the main program of the project.","title":"Clock"},{"location":"usage/#colors","text":"First, I'll explain you the colors.json file (located in the clock/ folder). This file is a json object. Keys are colors names and values are the RGB color value as a list. The list contains three integers (between 0 and 255). { \"color_name\": [<red_value>, <green_value>, <blue_value>] } To see an example of what the colors.json should contain, you can look the content of that file on GitHub. This file is made for people who want to add their custom colors.","title":"Colors"},{"location":"usage/#arguments","text":"Here I'll explain all argument you can give to the clock program. To get help on the clock program and see what arguments it take, call it with the -h or --help argument as follow ./clock.py -h . -h or --help \u2192 Show the help. -fg or --foreground with one of the color name which is in the colors.json file \u2192 Set the foreground color. -bg or --background with one of the color name which is in the colors.json file \u2192 Set the background color. -r or --rotation with the rotation angle (0, 90, 180, 270) \u2192 Set the rotation of the LED matrix. -b or --brightness with a float number between 0 and 1 \u2192 Set the brightness, higher is brighter. -l or --location with a string which is the name of the location you want the weather \u2192 Set the location you want the weather. -i or --interactive \u2192 Launch the program in interactive mode. -s or --speed with any int of float number higher than 0 \u2192 Set the scoll speed and refresh rate, lower fastest.","title":"Arguments"},{"location":"usage/#config","text":"I'll now explain how configuration this program work and his default values. The clock program has 4 configuration type: The defaults configuration. This is the configuration used in last resort The config file . This configuration file is persistent. The arguments given. This is configuration given when you start the program. The interactive mode . This mode asks you each value which can be confugured at the program start. The priroty of configuration is like this: Very Prior Prior Less Prior Not Prior Interactive mode Arguments Config file Defaults","title":"Config"},{"location":"usage/#defaults","text":"Defaults values are used when: The config.json file is not found. No arguments are given. The interactive mode is not used. Defaults values are: Parameter Default value foreground white background black rotation 0 brightness 1 location None speed 0.1","title":"defaults"},{"location":"usage/#config_file","text":"Values in the configuration file are used when: The file config.json is present. The value for a setting is valid. No arguments are given. The interactive mode is not used. You can change the configuration in this file: By hand (not recommended). By using the Menu config program and copying the output in the config.json file. By accessing the Menu config feature while the clock is running (recommended). To know how to do that, see the usage section. Warning: Using the Menu config feature of clock program will overwrite the previous config in the config.json file .","title":"config file"},{"location":"usage/#arguments_1","text":"Values in arguments are used when: The argument is present. The value of the argument is valid. The interactive mode is not used. To know available arguments and their values, refer to the Arguments section. Giving arguments will not overwrite the config.json file.","title":"arguments"},{"location":"usage/#interactive","text":"Values given in interactive mode are used when: The interactive mode is used. Using the interactive mode will not overwrite the config.json file.","title":"interactive"},{"location":"usage/#usage","text":"When the clock is started (it may take a little time to display things on the LED matrix) use the joystick to navigate. Joystick action Action Pushing Right Switch to the next feature Pushing Left Switch to the previous feature Pushing Up Nothing Pushing Down Nothing Pressing it Start the menu config (press agait to exit) Each config work exactly the same as when they are started as the main program. To know how to use features, see below.","title":"Usage"},{"location":"usage/#binary_clocks","text":"The two binary clocks both don't take any arguments. They just display the time in binary. The time is continuously displayed. Time is displaied as explained in the feature section .","title":"Binary clocks"},{"location":"usage/#block_mode","text":"The rotation is set to 0\u00b0 (that mean the up is up and the down is down).","title":"Block mode"},{"location":"usage/#hyphen_mode","text":"The rotation is set to 180\u00b0 (that mean the up is down and the down is up).","title":"Hyphen mode"},{"location":"usage/#digital_clock","text":"The digital clock program take no arguments. It just displays the time. The time is continuously displayed. The rotation is set to 0\u00b0 (that mean the up is up and the down is down). Time is displayed as explained in the feature section .","title":"Digital clock"},{"location":"usage/#menu_config","text":"The menu config program is used to make the config. The rotation is set to 180\u00b0 (that mean the up is down and the down is up). The foreground color is set to blue while the background color is set to yellow. When you execute the program you'll first can change the brightness. Pushing the joystick on the left you'll can change the text scroll speed (lower is speediest, highest is slowest). Pushing the joystick on the left again, you'll can change the rotation. Pushing the joystick on the left again, you'll can change the background color. Pushing the joystick on the left again, you'll can change the foreground color. Pushing the joystick one last time on the left you go back to the brightness settings. Pushing the joystick to the right will browse settings in the reverse order. To change value of a setting, push the joystick up or down. For example, pushing down the joystick on the brightness settings will reduce it, while pushing it up will increase the brightness. Changes take effect immediately. When you set the rotate, only the display rotates. The joystick directions don't change. When you have configured your settings as you like, press the joystick to quit the program. It will print on screen you json configuration. You can copy it to the config file of the clock program.","title":"Menu config"},{"location":"usage/#diaporama","text":"The diaporama program takes no arguments. It just pass images. Images are displayed 1.5 seconds. The rotation is set to 180\u00b0 (that mean the up is down and the down is up). You can add your custom images in the folder clock/pictures/ . Images you add should have a size of 8 by 8 pixels .","title":"Diaporama"}]}